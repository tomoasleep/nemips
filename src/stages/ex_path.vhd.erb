library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.const_state.all;
use work.const_mux.all;
use work.const_alu_ctl.all;
use work.const_fpu_ctl.all;
use work.const_io.all;
use work.const_sram_cmd.all;
use work.const_pipeline_state.all;

use work.typedef_opcode.all;
use work.typedef_data.all;

<%- require_relative 'src/project_helper' -%>

<%- project_components %w(decoder exec_state_decoder) -%>
<%- project_components %w(write_back_state_decoder) -%>
<%- project_components %w(exec_ctl alu alu_decoder) -%>
<%- project_components %w(fpu_controller sub_fpu fpu_decoder) -%>
<%- project_components %w(branch_condition_checker) -%>

entity ex_path is
  port(
        opcode: in opcode_type;
        funct : in funct_type;

        imm  : in immediate_type;
        shamt : in shift_amount_type;
        address : in addr_type;

        int_rd1: in word_data_type;
        int_rd2: in word_data_type;

        float_rd1: in word_data_type;
        float_rd2: in word_data_type;

        mem_read_data: in word_data_type;
        io_read_data: in word_data_type;

        pc: in pc_data_type;
        tag_in: in request_tag_type;
        tag_out: out request_tag_type;

        result: out word_data_type;
        go: out std_logic;

        inst_ram_write_data: out pc_data_type;
        inst_ram_write_enable : out std_logic;

        mem_addr: out addr_type;
        ex_result_src: out ex_result_src_type;

        sram_command : out sram_cmd_type;
        io_read_command : out io_length_type;
        io_write_command : out io_length_type;

        clk : in std_logic
      );
end ex_path;

architecture behave of ex_path is

  <%= component_definitions %>
  <%= component_signal_definitions %>

  constant zero : word_data_type := (others => '0');

  signal ex_pc_increment: pc_data_type;
  signal pc_bta, pc_jta: pc_data_type;

  signal calc_input1, calc_input2: word_data_type;

  signal fpu_A, fpu_B: word_data_type;
  signal alu_ctl: alu_ctl_type;
  signal fpu_ctl: fpu_ctl_type;
  signal alu_result, signex_imm: word_data_type;
  signal fpu_result, sub_fpu_result: word_data_type;

  signal fpu_tag_in: request_tag_type;
  signal fpu_tag_out: request_tag_type;
  signal sub_fpu_tag_in: request_tag_type;
  signal sub_fpu_tag_out: request_tag_type;

  signal ex_state: exec_state_type;
  signal ex_result_src: ex_result_src_type;
  signal ex_go_src: ex_go_src_type;
  signal ex_calc_srcB: calc_srcB_type;

  signal branch, branch_go: std_logic;
  signal pc_rs_write, pc_jta_write: std_logic;

begin
  <%= project_components_mapping(as: {
    opcode: 'opcode',
    funct: 'funct',
    a: 'calc_input1',
    b: 'calc_input2',
    alu_ctl: 'alu_ctl',
    fpu_ctl: 'fpu_ctl',
    tag_in: 'tag_in'
  }) %>

  pc_bta <= std_logic_vector(unsigned(pc) + unsigned(signex_imm));
  pc_jta(29 downto 26) <= pc(29 downto 26);
  pc_jta(25 downto  0) <= address;

  pc_write_data <= pc_bta when exec_ctl_branch = '1' else
                   pc_jta when exec_ctl_pc_jta_write = '1' else
                   int_rd1(29 downto 0) & "00";

  mem_addr <= std_logic_vector(unsigned(signex_imm) + unsigned(int_rd1));

  fpu_A <= float_rd1;
  fpu_B <= float_rd2;

  calc_input1 <= int_rd1;

  with ex_calc_srcB select
    calc_input2 <= int_rd1 when calc_srcB_rd2,
                   signex_imm when calc_srcB_imm,
                   x"0000" & imm when calc_srcB_zimm,
                   x"000000" & "000" & shamt when others;

  signex_imm(31 downto 16) <= (others => imm(15));
  signex_imm(15 downto  0) <= imm;

  with exec_ctl_ex_result_src select
    result <= alu_result when ex_result_src_alu,
              fpu_result when ex_result_src_fpu,
              sub_fpu_result when ex_result_src_sub_fpu,
              mem_read_data when ex_result_src_mem,
              io_read_data when ex_result_src_io,
              zero when others;

  with exec_ctl_ex_result_src select
    tag_out <= tag_in when ex_result_src_alu,
               fpu_tag_out when ex_result_src_fpu,
               sub_fpu_tag_out when ex_result_src_sub_fpu,
               zero when others;

  fpu_tag_in <= tag_in;
  sub_fpu_tag_in <= tag_in;

  branch_condition_checker_rs <= int_rd1;
  branch_condition_checker_rt <= int_rd2;
  branch_condition_checker_i_op <= opcode;
  branch_condition_checker_enable <= exec_ctl_branch;

end behave;

